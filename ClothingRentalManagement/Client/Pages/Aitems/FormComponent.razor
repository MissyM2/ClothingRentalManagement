@inject HttpClient _client

<EditForm Model="@aitem" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Short Description:</label>
        <div>
            <InputText @bind-Value="@aitem.ShortDesc" class="form-control" />
            <ValidationMessage For="@(() => aitem.ShortDesc)" />
        </div>
    </div>

    <!-- selection is made using html tags -->
    <div class="form-group">
        <label>Apparel Type: </label>
        <div>
            <select @bind="aitem.AtypeId" class="form-control">
                <option value="">-- Select Apparel Type --</option>
                @if (Atypes != null)
                {
                    foreach (var atype in Atypes)
                    {
                        <option value="@atype.Id">@atype.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => aitem.AtypeId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Brand: </label>
        <div>
            <select @bind="aitem.BrandId" class="form-control">
                <option value="">-- Select Brand --</option>
                @if (Brands != null)
                {
                    foreach (var brand in Brands)
                    {
                        <option value="@brand.Id">@brand.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => aitem.BrandId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Color: </label>
        <div>
            <select @bind="aitem.ColorId" class="form-control">
                <option value="">-- Select Color --</option>
                @if (Colors != null)
                {
                    foreach (var color in Colors)
                    {
                        <option value="@color.Id">@color.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => aitem.ColorId)" />
        </div>
    </div>
    <!-- selection is made with Blazor component -->
    <div class="form-group">
        <label>Season: </label>
        <div>
            <InputSelect @bind-Value="aitem.SeasonId" class="form-control">
                <option value="">-- Select Season --</option>
                @if (Seasons != null)
                {
                    foreach (var season in Seasons)
                    {
                        <option value="@season.Id">@season.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => aitem.Season.Id)" />
        </div>
    </div>
    <div class="form-group">
        <label>Size: </label>
        <div>
            <InputSelect @bind-Value="aitem.SizeId" class="form-control">
                <option value="">-- Select Size</option>
                @if (Sizes != null)
                {
                    foreach (var size in Sizes)
                    {
                        <option value="@size.Id">@size.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => aitem.SizeId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Additional Description:</label>
        <div>
            <InputText @bind-Value="@aitem.LongDesc" class="form-control" />
            <ValidationMessage For="@(() => aitem.LongDesc)" />
        </div>
    </div>


    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
    <BackToList Target="aitems" />

</EditForm>

@code {
    private IList<Atype> Atypes;
    private IList<Brand> Brands;
    private IList<Color> Colors;
    private IList<Season> Seasons;
    private IList<Size> Sizes;

    protected async override Task OnInitializedAsync()
    {
        Atypes = await _client.GetFromJsonAsync<List<Atype>>($"{Endpoints.AtypesEndpoint}");
        Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndpoint}");
        Colors = await _client.GetFromJsonAsync<List<Color>>($"{Endpoints.ColorsEndpoint}");
        Seasons = await _client.GetFromJsonAsync<List<Season>>($"{Endpoints.SeasonsEndpoint}");
        Sizes = await _client.GetFromJsonAsync<List<Size>>($"{Endpoints.SizesEndpoint}");
    }

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Aitem aitem { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

}
