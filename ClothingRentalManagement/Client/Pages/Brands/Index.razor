@page "/brands/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">List of Brands</h3>
<br />
<br />
@if (Brands == null)
{
    <div class="alert alert-info">Loading brands...</div>
}
else
{
    <table class="table ">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var brand in Brands)
            {
                <tr>
                    <td>@brand.Name</td>

                    <td>
                        <a href="/brands/view/@brand.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/brands/edit/@brand.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(brand.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }
        </tbody>
    </table>
}


@code {
    private List<Brand> Brands;

    protected async override Task OnInitializedAsync()
    {
        Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndpoint}");
    }

    async Task Delete(int brandsId)
    {
        var brands = Brands.First(q => q.Id == brandsId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {brands.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.BrandsEndpoint}/{brandsId}");
            await OnInitializedAsync();
        }

    }
}
